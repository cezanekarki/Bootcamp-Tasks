# -*- coding: utf-8 -*-
"""gitlab_task.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BJF_VkN7cmg5yuiWZgwUm-PDt9ThOcF9

Initial Setup to get file name

https://gitlab.com/gitlab-org/gitlab-docs

Imports
"""

import requests
import json

"""*dictionary*

Initial API hits
"""

gitlab_token = 'glpat-Xyti-m98_bxnRYarTvVf'

api_url = 'https://gitlab.com/api/v4'

namespace = 'gitlab-org'
project = 'gitlab-docs'

project_endpoint = f'{api_url}/projects/{namespace}%2F{project}'
repo_contents_endpoint = f'{api_url}/projects/{namespace}%2F{project}/repository/tree'
contributors_endpoint = f'{api_url}/projects/{namespace}%2F{project}/repository/contributors'


headers = {'Private-Token': gitlab_token}

param= {'recursive': True,'per_page':100}

project_response = requests.get(project_endpoint, headers=headers,params=param)
repo_contents_response = requests.get(repo_contents_endpoint, headers=headers,params=param)
contributor_response = requests.get(contributors_endpoint, headers=headers, params=param)

print(project_response.text)
print(repo_contents_response.text)

"""

```
`# This is formatted as code`
```

Creating Dictionary
  """

dic_api = {}

if project_response.status_code == 200 and repo_contents_response.status_code == 200 and contributor_response.status_code == 200:
    # Parse the JSON responses

    project_info = project_response.json()
    repo_contents = repo_contents_response.json()
    contributor_contents = contributor_response.json()



    # Populate the dictionary with project information
    dic_api['id'] = project_info['id']
    dic_api['name'] = project_info['name']

    contributors_list = []

    for contributor in contributor_contents:
        contributors_list.append({
            'name': contributor['name'],
            'email': contributor['email']
        })

    dic_api['contributors'] = contributors_list

    contents_info = {
        'meta': {
            'folders_count': len([item for item in repo_contents if item['type'] == 'tree']),
            'files_count': len([item for item in repo_contents if item['type'] == 'blob'])
        },
        'folders': [],
        'files': []
    }

    for item in repo_contents:
        if item['type'] == 'tree':
            contents_info['folders'].append({
                'folder_name': item['name'],
                'folder_path': item['path'],
                'folder_mode': item['mode']
            })
        elif item['type'] == 'blob':
            contents_info['files'].append({
                'file_name': item['name'],
                'file_path': item['path'],
                'file_mode': item['mode']
            })

    dic_api['contents_info'] = contents_info
    project_json = json.dumps(dic_api, indent=4)


    print(project_json)

else:
    print(f"Failed to retrieve project information: {project_response.status_code} - {project_response.text}")
    print(f"Failed to retrieve repository contents: {repo_contents_response.status_code} - {repo_contents_response.text}")



"""Implementation using class

"""

import requests
import json

class GitlabAPI:
    def __init__(self, gitlab_token):
        self.api_url = 'https://gitlab.com/api/v4'
        self.gitlab_token = gitlab_token
        self.headers = {'Private-Token': self.gitlab_token}

    def get_project_info(self, namespace, project):
        project_endpoint = f'{self.api_url}/projects/{namespace}%2F{project}'
        param = {'recursive': True, 'per_page': 100}
        response = requests.get(project_endpoint, headers=self.headers, params=param)
        if response.status_code == 200:
            return response.json()
        else:
            return None

    def get_repo_contents(self, namespace, project):
        repo_contents_endpoint = f'{self.api_url}/projects/{namespace}%2F{project}/repository/tree'
        param = {'recursive': True, 'per_page': 100}
        response = requests.get(repo_contents_endpoint, headers=self.headers, params=param)
        if response.status_code == 200:
            return response.json()
        else:
            return None

    def get_contributors(self, namespace, project):
        contributors_endpoint = f'{self.api_url}/projects/{namespace}%2F{project}/repository/contributors'
        param = {'recursive': True, 'per_page': 100}
        response = requests.get(contributors_endpoint, headers=self.headers, params=param)
        if response.status_code == 200:
            return response.json()
        else:
            return None

    def generate_project_json(self, namespace, project):
        project_info = self.get_project_info(namespace, project)
        repo_contents = self.get_repo_contents(namespace, project)
        contributor_contents = self.get_contributors(namespace, project)

        if project_info and repo_contents and contributor_contents:
            dic_api = {}
            dic_api['id'] = project_info['id']
            dic_api['name'] = project_info['name']

            contributors_list = [{'name': contributor['name'], 'email': contributor['email']} for contributor in contributor_contents]
            dic_api['contributors'] = contributors_list

            contents_info = {
                'meta': {
                    'folders_count': len([item for item in repo_contents if item['type'] == 'tree']),
                    'files_count': len([item for item in repo_contents if item['type'] == 'blob'])
                },
                'folders': [],
                'files': []
            }

            for item in repo_contents:
                if item['type'] == 'tree':
                    contents_info['folders'].append({
                        'folder_name': item['name'],
                        'folder_path': item['path'],
                        'folder_mode': item['mode']
                    })
                elif item['type'] == 'blob':
                    contents_info['files'].append({
                        'file_name': item['name'],
                        'file_path': item['path'],
                        'file_mode': item['mode']
                    })

            dic_api['contents_info'] = contents_info
            project_json = json.dumps(dic_api, indent=4)
            return project_json
        else:
            return None

# Usage
gitlab_token = 'glpat-Xyti-m98_bxnRYaRYvVf'
namespace = 'gitlab-org'
project = 'gitlab-docs'

gitlab_api = GitlabAPI(gitlab_token)
project_json = gitlab_api.generate_project_json(namespace, project)

if project_json:
    print(project_json)
else:
    print("Failed to retrieve project information.")

